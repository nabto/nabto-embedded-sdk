name: CI

on:
  push:
  release:
    types: [published]

jobs:
  build-and-test:
    name: Build
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        cli-only: [0, 1]
        os: [windows-2022, ubuntu-22.04, macos-12]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Configure cmake
        run: mkdir build-dir && cd build-dir && cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/artifacts -DDEVICE_BUILD_TESTS=ON -DNABTO_DEVICE_DTLS_CLIENT_ONLY=${{ matrix.cli-only }} ..

      - name: Build
        run: cmake --build build-dir --parallel

      - name: Install
        run: cmake --build build-dir --target install

      - if: matrix.os == 'windows-2022'
        name: Test run
        run: |
          netsh advfirewall firewall add rule name="embedded_unit_test" dir=in action=allow program="${{ github.workspace }}\artifacts\bin\embedded_unit_test.exe" enable=yes
          ${{ github.workspace }}/artifacts/bin/embedded_unit_test -l test_suite --detect_memory_leaks=0

      - if: matrix.os != 'windows-2022'
        name: Test run
        run: ${{ github.workspace }}/artifacts/bin/embedded_unit_test -l test_suite --detect_memory_leaks=0

      - name: Upload artifacts
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: artifacts_${{matrix.os}}
          path: ${{ github.workspace }}/artifacts
          if-no-files-found: warn


  release-assets:
    name: Release Assets
    needs: build-and-test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        binary: [tcp_tunnel_device]
    if: github.event_name == 'release' && success()
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifacts_ubuntu-22.04
          path: linux
      - uses: actions/download-artifact@v2
        with:
          name: artifacts_windows-2022
          path: windows
      - uses: actions/download-artifact@v2
        with:
          name: artifacts_macos-12
          path: macos
      - name: List assets
        run: ls -R
      - name: Upload linux asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: linux/bin/${{ matrix.binary}}
          asset_name: ${{ matrix.binary}}_linux
          asset_content_type: application/octet-stream
      - name: Upload windows asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: windows/bin/${{ matrix.binary}}.exe
          asset_name: ${{ matrix.binary}}_windows.exe
          asset_content_type: application/octet-stream
      - name: Upload mac asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: macos/bin/${{ matrix.binary}}
          asset_name: ${{ matrix.binary}}_macos
          asset_content_type: application/octet-stream
